CREATE TABLE matters (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    title character varying NOT NULL,
    description text NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL,
    deleted boolean DEFAULT false NOT NULL,
    deleted_by uuid REFERENCES auth.users(id) NULL,
    deleted_at timestamp with time zone NULL,
    created_by uuid REFERENCES auth.users(id) NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    git_repo character varying NOT NULL,
    email_storage character varying NOT NULL,
    CONSTRAINT delete_consistency CHECK (
        (deleted = false AND deleted_by IS NULL AND deleted_at IS NULL) OR
        (deleted = true AND deleted_by IS NOT NULL AND deleted_at IS NOT NULL)
    )
);

COMMENT ON TABLE matters IS 'Matters can be soft deleted but not permanently deleted. 
Soft delete requires both deleted_by and deleted_at to be set.

Each matter has:
1. A name and description which can be edited by anyone with edit rights.
2. An associated email address for communication. 
-- so attorneys can send email to 19fl002753@associateattorney.ai and that email will be associated with the matter.
3. Goals (see goals.sql)
4. Tasks (see tasks.sql)
5. Events (see events.sql)
6. Files stored in gitea repository

The user who created the matter is:
1A. Automatically given edit rights
1B. Can later give up his edit rights
1C. Not treated special than anyone else who has edit rights to the matter';

-- Add comments for the new columns
COMMENT ON COLUMN matters.git_repo IS 'Repository name in Gitea where all files for this matter are stored. Files are managed through the Gitea server as described in FilesCt.vue';

COMMENT ON COLUMN matters.email_storage IS 'Email address where communications for this matter are stored. Emails sent to catchall@associateattorney.ai are processed and stored if they match this matter''s address as described in EmailsCt.vue';

-- Automatically add creator to matter_access on matter creation
CREATE OR REPLACE FUNCTION add_creator_access() RETURNS TRIGGER AS $$
DECLARE
    creator_id uuid;
BEGIN
    -- Get the creator_id from the NEW record instead of auth.uid()
    creator_id := NEW.created_by;
    
    INSERT INTO matter_access (
        matter_id, 
        shared_with_user_id, 
        access_type, 
        granted_by_uuid
    )
    VALUES (
        NEW.id, 
        creator_id, 
        'edit', 
        creator_id
    );
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER on_matter_created
    AFTER INSERT ON matters
    FOR EACH ROW
    EXECUTE FUNCTION add_creator_access();

-- Create indexes
CREATE INDEX matters_created_by_idx ON matters USING btree (created_by);
CREATE INDEX matters_deleted_idx ON matters USING btree (deleted);
CREATE INDEX matters_deleted_by_idx ON matters USING btree (deleted_by);

-- Enable Row Level Security
ALTER TABLE matters ENABLE ROW LEVEL SECURITY;

-- Create RLS Policies
CREATE POLICY "Users can create matters" 
    ON matters 
    AS PERMISSIVE
    FOR INSERT 
    TO authenticated 
    WITH CHECK (created_by = auth.uid());

CREATE POLICY "Users can view matters" 
    ON matters 
    AS PERMISSIVE
    FOR SELECT 
    TO authenticated 
    USING (
        (id IN (
            SELECT matter_id 
            FROM matter_access 
            WHERE shared_with_user_id = auth.uid()
        ))
        OR
        (created_by = auth.uid())
    );

CREATE POLICY "Users can update matters" 
    ON matters
    AS PERMISSIVE
    FOR UPDATE 
    TO authenticated 
    USING (id IN (
        SELECT matter_id 
        FROM matter_access 
        WHERE shared_with_user_id = auth.uid() 
        AND access_type = 'edit'
    ));

CREATE POLICY "Users can soft delete matters" 
    ON matters
    AS PERMISSIVE
    FOR UPDATE 
    TO authenticated 
    USING (
        id IN (
            SELECT matter_id 
            FROM matter_access 
            WHERE shared_with_user_id = auth.uid() 
            AND access_type = 'edit'
        )
    )
    WITH CHECK (deleted = true);


CREATE OR REPLACE FUNCTION public.get_all_users()
RETURNS TABLE(id uuid, email text)
LANGUAGE sql
SECURITY DEFINER
SET search_path TO 'public'
AS $function$
  SELECT id, email
  FROM auth.users
  ORDER BY email;
$function$;
