CREATE TABLE matters (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    title character varying NOT NULL,
    description text NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL,
    archived boolean DEFAULT false NOT NULL,
    archived_by uuid REFERENCES auth.users(id) NULL,
    archived_at timestamp with time zone NULL,
    created_by uuid REFERENCES auth.users(id) NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    CONSTRAINT archive_consistency CHECK (
        (archived = false AND archived_by IS NULL AND archived_at IS NULL) OR
        (archived = true AND archived_by IS NOT NULL AND archived_at IS NOT NULL)
    )
);

COMMENT ON TABLE matters IS 'Matters can be archived but not deleted. 
Archiving requires both archived_by and archived_at to be set.
Each matter has:
1. A matter has a name and description which can be edited by anyone with edit rights.
2. An associated email address for communication. 
-- so attorneys can send email to 19fl002753@associateattorney.ai and that email will be associated with the matter.
3. Goals (see goals.sql)
4. Tasks (see tasks.sql)
5. Events (see events.sql)
6. Files stored in gitea repository
7. The user who created the matter is:
7A. Automatically given edit rights
7B. Can later give up his edit rights
7C. The user who created the matter is not treated special than anyone else who has edit rights to the matter';

-- Automatically add creator to matter_access on matter creation
CREATE OR REPLACE FUNCTION add_creator_access() RETURNS TRIGGER AS $$
DECLARE
    creator_id uuid;
BEGIN
    -- Get the creator_id from the NEW record instead of auth.uid()
    creator_id := NEW.created_by;
    
    INSERT INTO matter_access (
        matter_id, 
        shared_with_user_id, 
        access_type, 
        granted_by_uuid
    )
    VALUES (
        NEW.id, 
        creator_id, 
        'edit', 
        creator_id
    );
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER on_matter_created
    AFTER INSERT ON matters
    FOR EACH ROW
    EXECUTE FUNCTION add_creator_access();

-- Create indexes
CREATE INDEX matters_created_by_idx ON matters USING btree (created_by);
CREATE INDEX matters_archived_idx ON matters USING btree (archived);
CREATE INDEX matters_archived_by_idx ON matters USING btree (archived_by);

-- Enable Row Level Security
ALTER TABLE matters ENABLE ROW LEVEL SECURITY;

-- Create RLS Policies
CREATE POLICY "Users can create matters" 
    ON matters FOR INSERT 
    WITH CHECK (created_by = auth.uid());

CREATE POLICY "Users can view matters" 
    ON matters FOR SELECT 
    USING (id IN (
        SELECT matter_id 
        FROM matter_access 
        WHERE shared_with_user_id = auth.uid()
    ));

CREATE POLICY "Users can update matters" 
    ON matters FOR UPDATE 
    USING (id IN (
        SELECT matter_id 
        FROM matter_access 
        WHERE shared_with_user_id = auth.uid() 
        AND access_type = 'edit'
    ));

CREATE POLICY "Users can archive matters" 
    ON matters FOR UPDATE 
    USING (
        id IN (
            SELECT matter_id 
            FROM matter_access 
            WHERE shared_with_user_id = auth.uid() 
            AND access_type = 'edit'
        )
    )
    WITH CHECK (archived = true);
