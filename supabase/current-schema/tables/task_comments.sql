    CREATE TABLE task_comments (
      id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
      task_id BIGINT REFERENCES tasks(id) ON DELETE CASCADE,
      user_id UUID REFERENCES auth.users(id),
      content TEXT NOT NULL,
      created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
      updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
      type TEXT NOT NULL DEFAULT 'comment',
      metadata JSONB
    );

    -- Index for faster lookups
    CREATE INDEX task_comments_task_id_idx ON task_comments(task_id);
    CREATE INDEX task_comments_user_id_idx ON task_comments(user_id);

    -- Enable RLS
    ALTER TABLE task_comments ENABLE ROW LEVEL SECURITY;

    -- Policies
    CREATE POLICY "Users can view comments on tasks they have access to" ON task_comments
    FOR SELECT USING (
      task_id IN (
        SELECT t.id FROM tasks t
        WHERE t.matter_id IN (
          SELECT matter_id FROM matter_access WHERE shared_with_user_id = auth.uid()
        )
      )
    );

    CREATE POLICY "Users can create comments on tasks they have access to" ON task_comments
    FOR INSERT WITH CHECK (
      task_id IN (
        SELECT t.id FROM tasks t
        WHERE t.matter_id IN (
          SELECT matter_id FROM matter_access WHERE shared_with_user_id = auth.uid()
        )
      )
    );

    CREATE POLICY "Users can update their own comments" ON task_comments
    FOR UPDATE USING (
      user_id = auth.uid() AND
      task_id IN (
        SELECT t.id FROM tasks t
        WHERE t.matter_id IN (
          SELECT matter_id FROM matter_access WHERE shared_with_user_id = auth.uid()
        )
      )
    );

    CREATE POLICY "Users can delete their own comments" ON task_comments
    FOR DELETE USING (
      user_id = auth.uid() AND
      task_id IN (
        SELECT t.id FROM tasks t
        WHERE t.matter_id IN (
          SELECT matter_id FROM matter_access WHERE shared_with_user_id = auth.uid()
        )
      )
    );

